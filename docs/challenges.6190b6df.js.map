{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,W,I,E,A,G,E,GCEA,IAgBA,EAhBI,EAAU,IAAI,IAgBlB,EAfA,SAAkB,CAAO,CAAE,CAAQ,EACjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAG,EAAG,GAAK,EAC5C,EAAQ,GAAG,CAAC,CAAQ,CAAC,EAAE,CAAE,CACvB,QAAS,EACT,KAAM,CAAQ,CAAC,EAAI,EAAE,AACvB,EAEJ,C,G,E,Q,S,C,C,C,E,E,E,O,C,oB,I,G,E,E,O,C,e,I,G,E,E,O,C,c,I,G,E,E,O,C,c,I,G,E,E,O,C,W,I,G,E,E,O,C,a,I,G,E,E,O,C,oB,I,G,E,E,O,C,a,I,G,E,E,O,C,a,I,G,E,E,O,C,gB,I,GCVA,IAAM,EAAU,sFAEV,EAAS,CACX,eAAgB,iCACpB,EAgBA,eAAe,EAAkB,CAAa,EAC1C,IAAM,EAAM,EAAU,CAAC,EAAE,EAAM,cAAc,CAAC,CAOxC,EAAW,MAAM,MAAM,EALb,CACZ,OAAQ,MACR,QAAS,CACb,GAKA,OAFa,MAAM,EAAS,IAAI,EAGpC,CAEA,eAAe,IAQX,IAAM,EAAW,MAAM,MAPX,EAAU,iBAEN,CACZ,OAAQ,MACR,QAAS,CACb,GAGM,EAAO,MAAM,EAAS,IAAI,GAEhC,OADA,QAAQ,GAAG,CAAC,GACL,CACX,CAEA,eAAe,EAAY,CAAc,EACrC,IAAM,EAAM,EAAU,CAAC,SAAS,EAAE,EAAO,KAAK,CAAC,CAOzC,EAAW,MAAM,MAAM,EALb,CACZ,OAAQ,MACR,QAAS,CACb,GAGM,EAAO,MAAM,EAAS,IAAI,GAEhC,OADA,QAAQ,GAAG,CAAC,GACL,CACX,CAE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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","src/modules/fetch.ts","node_modules/@parcel/runtime-js/lib/runtime-cf123e642fc0f03f.js","node_modules/@parcel/runtime-js/lib/runtime-00f3f18eddd709f1.js","node_modules/@parcel/runtime-js/lib/runtime-51712c928d8c99c0.js","node_modules/@parcel/runtime-js/lib/runtime-4fe7a649e28f878c.js","src/modules/challanges.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirefc52\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirefc52\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = new Map();\nfunction $18c11f3350a906ea$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$18c11f3350a906ea$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping.get(id);\n    if (resolved == null) throw new Error(\"Could not resolve bundle with id \" + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nparcelRegister(\"1ahZW\", function(module, exports) {\n\n$parcel$export(module.exports, \"getpostsFromUsers\", () => $7ce76dd366e58a77$export$757394d2bc56a6a9);\n$parcel$export(module.exports, \"getLoginUser\", () => $7ce76dd366e58a77$export$2f82891cea95bf3d);\n$parcel$export(module.exports, \"getYourUser\", () => $7ce76dd366e58a77$export$26939fe54a60a9f0);\n$parcel$export(module.exports, \"postNewUser\", () => $7ce76dd366e58a77$export$6001962e8d53e271);\n$parcel$export(module.exports, \"allUsers\", () => $7ce76dd366e58a77$export$a2e86eb8fefb17fd);\n$parcel$export(module.exports, \"postForum1\", () => $7ce76dd366e58a77$export$b6c7da38e66215af);\n$parcel$export(module.exports, \"postCommentForum1\", () => $7ce76dd366e58a77$export$3e7a6a8197e1d931);\n$parcel$export(module.exports, \"postForum2\", () => $7ce76dd366e58a77$export$a74f6de8490a9db3);\n$parcel$export(module.exports, \"postForum3\", () => $7ce76dd366e58a77$export$b7c2ab1ee09212e3);\n$parcel$export(module.exports, \"deleteAccount\", () => $7ce76dd366e58a77$export$45abfc3976589d02);\nconst $7ce76dd366e58a77$var$baseUrl = \"https://slutprojekt-js2-socialmedia-default-rtdb.europe-west1.firebasedatabase.app/\";\nconst $7ce76dd366e58a77$var$header = {\n    \"Content-type\": \"application/json; charset=UTF-8\"\n};\nasync function $7ce76dd366e58a77$export$3988ae62b71be9a3() {\n    const URL = $7ce76dd366e58a77$var$baseUrl + \".json\";\n    const options = {\n        method: \"GET\",\n        headers: $7ce76dd366e58a77$var$header\n    };\n    const response = await fetch(URL, options);\n    const info = await response.json();\n    console.log(info);\n    return info;\n}\nasync function $7ce76dd366e58a77$export$757394d2bc56a6a9(forum) {\n    const URL = $7ce76dd366e58a77$var$baseUrl + `${forum}/0/posts/.json`;\n    const options = {\n        method: \"GET\",\n        headers: $7ce76dd366e58a77$var$header\n    };\n    const response = await fetch(URL, options);\n    const info = await response.json();\n    // console.log(info)\n    return info;\n}\nasync function $7ce76dd366e58a77$export$2f82891cea95bf3d() {\n    const URL = $7ce76dd366e58a77$var$baseUrl + \"AllUsers/.json\";\n    const options = {\n        method: \"GET\",\n        headers: $7ce76dd366e58a77$var$header\n    };\n    const response = await fetch(URL, options);\n    const data = await response.json();\n    console.log(data);\n    return data;\n}\nasync function $7ce76dd366e58a77$export$26939fe54a60a9f0(userId) {\n    const URL = $7ce76dd366e58a77$var$baseUrl + `AllUsers/${userId}.json`;\n    const options = {\n        method: \"GET\",\n        headers: $7ce76dd366e58a77$var$header\n    };\n    const response = await fetch(URL, options);\n    const data = await response.json();\n    console.log(data);\n    return data;\n}\nasync function $7ce76dd366e58a77$export$6001962e8d53e271(newUser) {\n    const url = $7ce76dd366e58a77$var$baseUrl + \"AllUsers/.json\";\n    const options = {\n        method: \"POST\",\n        body: JSON.stringify(newUser),\n        headers: $7ce76dd366e58a77$var$header\n    };\n    const response = await fetch(url, options);\n    const info = await response.json();\n    console.log(info);\n    return info;\n}\nasync function $7ce76dd366e58a77$export$a2e86eb8fefb17fd() {\n    const url = \"https://slutprojekt-js2-socialmedia-default-rtdb.europe-west1.firebasedatabase.app/AllUsers.json\";\n    const options = {\n        method: \"GET\",\n        headers: $7ce76dd366e58a77$var$header\n    };\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error(\"Error fetching all users:\", error);\n        throw error;\n    }\n}\nasync function $7ce76dd366e58a77$export$b6c7da38e66215af(postData) {\n    const URL = $7ce76dd366e58a77$var$baseUrl + \"forum1/0/posts.json\";\n    const options = {\n        method: \"POST\",\n        body: JSON.stringify(postData),\n        headers: $7ce76dd366e58a77$var$header\n    };\n    const response = await fetch(URL, options);\n    const info = await response.json();\n    console.log(info);\n    return info;\n}\nasync function $7ce76dd366e58a77$export$3e7a6a8197e1d931(comment, postId) {\n    const URL = $7ce76dd366e58a77$var$baseUrl + `forum1/0/comments/${postId}/allCommentId.json`;\n    const options = {\n        method: \"POST\",\n        body: JSON.stringify(comment),\n        headers: $7ce76dd366e58a77$var$header\n    };\n    const response = await fetch(URL, options);\n    const info = await response.json();\n    console.log(info);\n    return info;\n}\n// async function getCommentsFromForum(forum: string, postId: string) {\n//     const URL = baseUrl + `${forum}/0/comments/${postId}.json`;\n//     const options = {\n//         method: 'GET',\n//         headers: header\n//     }\n//     const response = await fetch(URL, options);\n//     const info = await response.json();\n//     console.log(info)\n//     return info;\n// }\nasync function $7ce76dd366e58a77$export$a74f6de8490a9db3(postData) {\n    const URL = $7ce76dd366e58a77$var$baseUrl + \"forum2/0/posts.json\";\n    const options = {\n        method: \"POST\",\n        body: JSON.stringify(postData),\n        headers: $7ce76dd366e58a77$var$header\n    };\n    const response = await fetch(URL, options);\n    const info = await response.json();\n    console.log(info);\n    return info;\n}\nasync function $7ce76dd366e58a77$export$b7c2ab1ee09212e3(postData) {\n    const URL = $7ce76dd366e58a77$var$baseUrl + \"forum3/0/posts.json\";\n    const options = {\n        method: \"POST\",\n        body: JSON.stringify(postData),\n        headers: $7ce76dd366e58a77$var$header\n    };\n    const response = await fetch(URL, options);\n    const info = await response.json();\n    console.log(info);\n    return info;\n}\nasync function $7ce76dd366e58a77$export$6ca2c30598d1bf61(postId, forum) {\n    const commentURL = $7ce76dd366e58a77$var$baseUrl + `${forum}/0/posts/${postId}.json`;\n    const options = {\n        method: \"DELETE\",\n        body: JSON.stringify(postId)\n    };\n    const response = await fetch(commentURL, options);\n    const info = await response.json();\n}\nasync function $7ce76dd366e58a77$export$45abfc3976589d02(userId) {\n    const commentURL = $7ce76dd366e58a77$var$baseUrl + `AllUsers/${userId}.json`;\n    const options = {\n        method: \"DELETE\"\n    };\n    const response = await fetch(commentURL, options);\n    const info = await response.json();\n    console.log(info);\n}\nasync function $7ce76dd366e58a77$export$4ca1c4cb170d1207(userId, commentId, commentContent) {\n    const url = $7ce76dd366e58a77$var$baseUrl + `AllUsers/${userId}/comments/${commentId}/${commentContent}.json`;\n    // const url = baseUrl + `AllUsers/-NtVjmivseXUbEYBwlrL/comments.json`;\n    const options = {\n        method: \"GET\",\n        headers: $7ce76dd366e58a77$var$header\n    };\n    console.log(\"Fetching comments for user with ID:\", userId);\n    console.log(\"URL:\", url);\n    try {\n        const response = await fetch(url, options);\n        if (!response.ok) throw new Error(\"Failed to fetch comments\");\n        const data = await response.json();\n        if (data) {\n            // Konvertera datan till en array av kommentarer\n            const comments = Object.values(data);\n            return comments;\n        } else return [];\n    } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n        throw error;\n    }\n}\n\n});\n\nparcelRegister(\"j2nI3\", function(module, exports) {\nmodule.exports = new URL(\"pig.259b56e2.jpeg\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"9SEX7\", function(module, exports) {\nmodule.exports = new URL(\"cow.5e4743a9.jpeg\", import.meta.url).toString();\n\n});\n\nparcelRegister(\"hC4Lz\", function(module, exports) {\nmodule.exports = new URL(\"chick.fc389aad.jpeg\", import.meta.url).toString();\n\n});\n\nvar $f8a2ba5b98af7643$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse('[\"hHaST\",\"challenges.6190b6df.js\",\"jHcLR\",\"pig.259b56e2.jpeg\",\"4pF8D\",\"cow.5e4743a9.jpeg\",\"80Qni\",\"chick.fc389aad.jpeg\"]'));\n\n\nvar $1ahZW = parcelRequire(\"1ahZW\");\n//Hämtar den inloggade användaren\nconst $b05b0ce0579d5b61$var$loggedInUserID = localStorage.getItem(\"userId\");\nconsole.log($b05b0ce0579d5b61$var$loggedInUserID);\n\n\n\n(0, $1ahZW.getYourUser)($b05b0ce0579d5b61$var$loggedInUserID).then((data)=>{\n    const usernameInHeader = document.querySelector(\".username\");\n    usernameInHeader.textContent = data.username;\n    const loggedInUserProfileImage = localStorage.getItem(\"profileImage\");\n    const profileImage = document.getElementById(\"profilePicture\");\n    if (data.userImage == \"pig\") {\n        const imageLink = new URL((parcelRequire(\"j2nI3\")));\n        profileImage.src = imageLink.toString();\n    } else if (data.userImage == \"cow\") {\n        const imageLink = new URL((parcelRequire(\"9SEX7\")));\n        profileImage.src = imageLink.toString();\n    } else {\n        const imageLink = new URL((parcelRequire(\"hC4Lz\")));\n        profileImage.src = imageLink.toString();\n    }\n});\n// Funktion för att fylla dropdown-listan med användarnamn\nasync function $b05b0ce0579d5b61$var$fillUserDropdown() {\n    try {\n        const users = await (0, $1ahZW.allUsers)(); // Hämta användaruppgifter från Firebase\n        const userDropdown = document.getElementById(\"userDropdown\");\n        if (userDropdown) {\n            userDropdown.innerHTML = \"\"; // Rensa dropdown-listan innan fyllning\n            for(const userId in users){\n                const username = users[userId].username;\n                const option = document.createElement(\"option\");\n                option.value = userId;\n                option.textContent = username;\n                userDropdown.appendChild(option);\n            }\n        }\n        console.log(\"User dropdown filled successfully.\");\n    } catch (error) {\n        console.error(\"Error filling user dropdown:\", error);\n    }\n}\n// Funktion för att navigera till användarens profil\nfunction $b05b0ce0579d5b61$var$navigateToUserProfile(selectedUserId) {\n    // Konstruera URL:en till användarens profil baserat på userId \n    const userProfileUrl = `./visitprofile.html?userId=` + selectedUserId;\n    // Navigera till den angivna URL:en\n    window.location.href = userProfileUrl;\n}\n// Lägg till händelselyssnare för att navigera till användarens profil vid val i dropdown-listan\nconst $b05b0ce0579d5b61$var$userDropdown = document.getElementById(\"userDropdown\");\nif ($b05b0ce0579d5b61$var$userDropdown) $b05b0ce0579d5b61$var$userDropdown.addEventListener(\"change\", (event)=>{\n    let selectedUserId = event.target.value;\n    if (selectedUserId) {\n        $b05b0ce0579d5b61$var$navigateToUserProfile(selectedUserId);\n        localStorage.setItem(\"selectedUserId\", selectedUserId);\n    }\n});\n$b05b0ce0579d5b61$var$fillUserDropdown();\n// Funktion för att skapa inlägg\nasync function $b05b0ce0579d5b61$var$createPost(event) {\n    event.preventDefault();\n    const postTitle = document.getElementById(\"postTitle\")?.value;\n    const postContent = document.getElementById(\"postContent\")?.value;\n    if (postTitle && postContent) try {\n        const user = await (0, $1ahZW.getYourUser)($b05b0ce0579d5b61$var$loggedInUserID);\n        // Ersätt loggedInUsername med användarnamnet för den inloggade användaren\n        const loggedInUsername = user.username;\n        await (0, $1ahZW.postForum3)({\n            userID: $b05b0ce0579d5b61$var$loggedInUserID,\n            postTitle: postTitle,\n            postContent: postContent,\n            username: loggedInUsername\n        });\n        // Återställ formuläret\n        document.getElementById(\"postTitle\").value = \"\";\n        document.getElementById(\"postContent\").value = \"\";\n        $b05b0ce0579d5b61$var$updatePostList();\n    } catch (error) {\n        console.error(\"Error creating post:\", error);\n    }\n}\n// Funktion för att skapa en kommentar\nasync function $b05b0ce0579d5b61$var$createComment(postId, postTitle, commentContent) {\n    try {\n        const commentList = document.getElementById(`commentList_${postId}`);\n        if (commentList) {\n            const commentElement = document.createElement(\"div\");\n            commentElement.classList.add(\"comment\");\n            const user = await (0, $1ahZW.getYourUser)($b05b0ce0579d5b61$var$loggedInUserID);\n            const username = user.username;\n            commentElement.innerHTML = `\n      <div>\n        <h6>Kommentar av ${username}:</h6>\n        <p>${commentContent}</p>\n        <button class=\"deleteCommentBtn\" data-comment-id=\"${postId}\">Delete</button>\n      </div>`;\n            commentList.appendChild(commentElement);\n        } else console.error(`Error: Could not find comment list for post ID ${postId}`);\n    } catch (error) {\n        console.error(\"Error creating comment:\", error);\n    }\n}\n// Uppdatera inläggslistan\nasync function $b05b0ce0579d5b61$var$updatePostList() {\n    try {\n        const posts = await $b05b0ce0579d5b61$var$getPosts(); // Hämta alla inlägg från Firebase\n        const postsList = document.getElementById(\"postsList\");\n        if (postsList) {\n            postsList.innerHTML = \"\"; // Rensa tidigare inlägg\n            // Loopa igenom alla inlägg\n            for(const postId in posts.forum3[0].posts){\n                const post = posts.forum3[0].posts[postId];\n                if (post) {\n                    const postElement = document.createElement(\"div\");\n                    postElement.classList.add(\"post\");\n                    const postTitle = post.postTitle;\n                    const postContent = post.postContent;\n                    const userId = post.userID;\n                    // Hämta användaruppgifter för författaren av inlägget\n                    const user = await (0, $1ahZW.getYourUser)(userId);\n                    const username = user ? user.username : \"Unknown User\";\n                    postElement.innerHTML = `\n            <div class=\"post\">\n              <div>\n                <h4 class=\"username\">Posted by: ${username}</h4>\n              </div>\n              <div>\n                <h5>${postTitle}</h5>\n                <p>${postContent}</p>\n              </div>\n              <form id=\"commentForm_${postId}\">\n                <textarea id=\"commentInput_${postId}\" placeholder=\"Inneh\\xe5ll\"></textarea>\n                <button class=\"commentBtn\" data-post-id=\"${postId}\" data-post-title=\"${postTitle}\">Kommentera</button>\n              </form>\n              <div id=\"commentList_${postId}\"></div>\n            </div>`;\n                    postsList.prepend(postElement);\n                    // Ladda och visa kommentarerna för den aktuella posten\n                    const comments = await $b05b0ce0579d5b61$var$getCommentsForPost(postId);\n                    const commentListElement = postElement.querySelector(`#commentList_${postId}`);\n                    if (commentListElement && comments) comments.forEach((comment)=>{\n                        const commentElement = document.createElement(\"div\");\n                        commentElement.classList.add(\"comment\");\n                        commentElement.innerHTML = `\n                <div>\n                  <h6>Kommentar av ${comment.username}:</h6>\n                  <p>${comment.commentContent}</p>\n                  <button class=\"deleteCommentBtn\" data-comment-id=\"${comment.commentId}\">Delete</button>\n                </div>`;\n                        commentListElement.appendChild(commentElement);\n                    });\n                    // Lägg till händelselyssnare för klickhändelse på kommentarknappen\n                    const commentBtn = postElement.querySelector(\".commentBtn\");\n                    commentBtn.addEventListener(\"click\", (event)=>{\n                        event.preventDefault(); // Förhindra standardbeteendet för knappen\n                        const postId = commentBtn.dataset.postId?.toString(); // Hämta postId från dataset på kommentarknappen\n                        const postTitle = commentBtn.dataset.postTitle; // Hämta postTitle från dataset på kommentarknappen\n                        if (postId && postTitle) {\n                            const commentInput = document.getElementById(`commentInput_${postId}`);\n                            const commentContent = commentInput.value.trim();\n                            if (commentContent) {\n                                $b05b0ce0579d5b61$var$createComment(postId, postTitle, commentContent); // Anropa createComment med postId och postTitle\n                                // Återställ kommentarinput\n                                commentInput.value = \"\";\n                            }\n                        } else console.error(\"Error: Could not extract postId or postTitle from dataset\");\n                    });\n                }\n            }\n        }\n    } catch (error) {\n        console.error(\"Error updating post list:\", error);\n    }\n}\n// Funktion för att hämta kommentarer för en specifik post\nasync function $b05b0ce0579d5b61$var$getCommentsForPost(postId) {\n    try {\n        // Hämta kommentarerna för den aktuella posten från databasen\n        const response = await fetch(`https://slutprojekt-js2-socialmedia-default-rtdb.europe-west1.firebasedatabase.app/forum1/0/comments/${postId}.json`);\n        const data = await response.json();\n        if (data) // Konvertera kommentar-objekten till en array för enklare hantering\n        return Object.keys(data).map((commentId)=>({\n                commentId: commentId,\n                ...data[commentId]\n            }));\n        else return []; // Returnera en tom array om det inte finns några kommentarer\n    } catch (error) {\n        console.error(\"Error fetching comments for post:\", error);\n        return []; // Returnera en tom array om det uppstår ett fel\n    }\n}\n// Lägg till för formulärets submit-händelse\nconst $b05b0ce0579d5b61$var$postForm = document.getElementById(\"postForm\");\nif ($b05b0ce0579d5b61$var$postForm) $b05b0ce0579d5b61$var$postForm.addEventListener(\"submit\", $b05b0ce0579d5b61$var$createPost);\n// Funktion för att hämta inlägg från Firebase\nasync function $b05b0ce0579d5b61$var$getPosts() {\n    const response = await fetch(\"https://slutprojekt-js2-socialmedia-default-rtdb.europe-west1.firebasedatabase.app/.json\");\n    const data = await response.json();\n    return data;\n}\n// Uppdatera inläggslistan vid sidans laddning\nwindow.onload = $b05b0ce0579d5b61$var$updatePostList;\n\n\n//# sourceMappingURL=challenges.6190b6df.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","const baseUrl = \"https://slutprojekt-js2-socialmedia-default-rtdb.europe-west1.firebasedatabase.app/\"\n\nconst header = {\n    \"Content-type\": \"application/json; charset=UTF-8\"\n}\n\nasync function get() {\n    const URL = baseUrl + '.json';\n\n    const options = {\n        method: 'GET',\n        headers: header\n    }\n\n    const response = await fetch(URL, options);\n    const info = await response.json();\n    console.log(info)\n    return info;\n}\n\nasync function getpostsFromUsers(forum: string) {\n    const URL = baseUrl + `${forum}/0/posts/.json`;\n\n    const options = {\n        method: 'GET',\n        headers: header\n    }\n\n    const response = await fetch(URL, options);\n    const info = await response.json();\n    // console.log(info)\n    return info;\n}\n\nasync function getLoginUser() {\n    const URL = baseUrl + 'AllUsers/.json'\n\n    const options = {\n        method: 'GET',\n        headers: header\n    }\n\n    const response = await fetch(URL, options);\n    const data = await response.json();\n    console.log(data);\n    return data;\n}\n\nasync function getYourUser(userId: string) {\n    const URL = baseUrl + `AllUsers/${userId}.json`\n\n    const options = {\n        method: 'GET',\n        headers: header\n    }\n\n    const response = await fetch(URL, options);\n    const data = await response.json();\n    console.log(data);\n    return data;\n}\n\nasync function postNewUser(newUser: any) {\n    const url = baseUrl + 'AllUsers/.json';\n\n    const options = {\n        method: 'POST',\n        body: JSON.stringify(newUser),\n        headers: header\n    }\n\n    const response = await fetch(url, options);\n    const info = await response.json();\n    console.log(info);\n    return info;\n\n}\n\nasync function allUsers(): Promise<any> {\n    const url = 'https://slutprojekt-js2-socialmedia-default-rtdb.europe-west1.firebasedatabase.app/AllUsers.json';\n\n    const options = {\n        method: 'GET',\n        headers: header\n    }\n\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error(\"Error fetching all users:\", error);\n        throw error;\n    }\n}\n\nasync function postForum1(postData: any) {\n    const URL = baseUrl + 'forum1/0/posts.json';\n\n    const options = {\n        method: 'POST',\n        body: JSON.stringify(postData),\n        headers: header\n    }\n\n    const response = await fetch(URL, options);\n    const info = await response.json();\n    console.log(info)\n    return info;\n}\n\nasync function postCommentForum1(comment: object, postId: string) {\n    const URL = baseUrl + `forum1/0/comments/${postId}/allCommentId.json`;\n\n    const options = {\n        method: 'POST',\n        body: JSON.stringify(comment),\n        headers: header\n    }\n\n\n    const response = await fetch(URL, options);\n    const info = await response.json();\n    console.log(info)\n    return info;\n}\n// async function getCommentsFromForum(forum: string, postId: string) {\n//     const URL = baseUrl + `${forum}/0/comments/${postId}.json`;\n\n//     const options = {\n//         method: 'GET',\n//         headers: header\n//     }\n\n//     const response = await fetch(URL, options);\n//     const info = await response.json();\n//     console.log(info)\n//     return info;\n// }\n\nasync function postForum2(postData: any) {\n    const URL = baseUrl + 'forum2/0/posts.json';\n\n    const options = {\n        method: 'POST',\n        body: JSON.stringify(postData),\n        headers: header\n    }\n\n    const response = await fetch(URL, options);\n    const info = await response.json();\n    console.log(info)\n    return info;\n}\n\nasync function postForum3(postData: any) {\n    const URL = baseUrl + 'forum3/0/posts.json';\n\n    const options = {\n        method: 'POST',\n        body: JSON.stringify(postData),\n        headers: header\n    }\n\n    const response = await fetch(URL, options);\n    const info = await response.json();\n    console.log(info)\n    return info;\n}\n\nasync function deletePost(postId: string, forum: string) {\n    const commentURL = baseUrl + `${forum}/0/posts/${postId}.json`;\n\n    const options = {\n        method: 'DELETE',\n        body: JSON.stringify(postId),\n    }\n\n    const response = await fetch(commentURL, options);\n    const info = await response.json();\n}\n\nasync function deleteAccount(userId: string) {\n    const commentURL = baseUrl + `AllUsers/${userId}.json`;\n\n    const options = {\n        method: 'DELETE'\n    }\n\n    const response = await fetch(commentURL, options);\n    const info = await response.json();\n    console.log(info)\n}\n\nasync function getCommentsInProfile(userId: string, commentId: string, commentContent: string) {\n    const url = baseUrl + `AllUsers/${userId}/comments/${commentId}/${commentContent}.json`;\n    // const url = baseUrl + `AllUsers/-NtVjmivseXUbEYBwlrL/comments.json`;\n\n    const options = {\n        method: 'GET',\n        headers: header\n    }\n    console.log(\"Fetching comments for user with ID:\", userId);\n    console.log(\"URL:\", url);\n\n    try {\n        const response = await fetch(url, options);\n        if (!response.ok) {\n            throw new Error('Failed to fetch comments');\n        }\n        const data = await response.json();\n        if (data) {\n            // Konvertera datan till en array av kommentarer\n            const comments: Comment[] = Object.values(data);\n            return comments;\n        } else {\n            return [];\n        }\n    } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n        throw error;\n    }\n}\n\nexport { get, getpostsFromUsers, getLoginUser, getYourUser, postNewUser, allUsers, postForum1, postForum2, postForum3, postCommentForum1, deletePost, deleteAccount, getCommentsInProfile }\n\n","module.exports = new __parcel__URL__(\"pig.259b56e2.jpeg\").toString();","module.exports = new __parcel__URL__(\"cow.5e4743a9.jpeg\").toString();","module.exports = new __parcel__URL__(\"chick.fc389aad.jpeg\").toString();","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"hHaST\\\",\\\"challenges.6190b6df.js\\\",\\\"jHcLR\\\",\\\"pig.259b56e2.jpeg\\\",\\\"4pF8D\\\",\\\"cow.5e4743a9.jpeg\\\",\\\"80Qni\\\",\\\"chick.fc389aad.jpeg\\\"]\"));","import { postForum3, getYourUser, allUsers } from \"./fetch.ts\";\n\n//Hämtar den inloggade användaren\nconst loggedInUserID = localStorage.getItem('userId') as string;\nconsole.log(loggedInUserID)\n\ngetYourUser(loggedInUserID).then(data => {\n  const usernameInHeader = document.querySelector('.username') as HTMLParagraphElement;\n  usernameInHeader.textContent = data.username;\n\n  const loggedInUserProfileImage = localStorage.getItem('profileImage')\n  const profileImage = document.getElementById('profilePicture') as HTMLImageElement;\n\n  if (data.userImage == 'pig') {\n    const imageLink = new URL('../media/img/pig.jpeg', import.meta.url)\n    profileImage.src = imageLink.toString();\n  } else if (data.userImage == 'cow') {\n    const imageLink = new URL('../media/img/cow.jpeg', import.meta.url)\n    profileImage.src = imageLink.toString();\n  } else {\n    const imageLink = new URL('../media/img/chick.jpeg', import.meta.url)\n    profileImage.src = imageLink.toString();\n  }\n});\n\n// Funktion för att fylla dropdown-listan med användarnamn\nasync function fillUserDropdown(): Promise<void> {\n  try {\n    const users = await allUsers(); // Hämta användaruppgifter från Firebase\n    const userDropdown = document.getElementById(\"userDropdown\") as HTMLSelectElement;\n\n    if (userDropdown) {\n      userDropdown.innerHTML = \"\"; // Rensa dropdown-listan innan fyllning\n\n      for (const userId in users) {\n        const username = users[userId].username;\n        const option = document.createElement(\"option\");\n        option.value = userId;\n        option.textContent = username;\n        userDropdown.appendChild(option);\n      }\n    }\n\n    console.log(\"User dropdown filled successfully.\");\n  } catch (error) {\n    console.error(\"Error filling user dropdown:\", error);\n  }\n}\n\n// Funktion för att navigera till användarens profil\nfunction navigateToUserProfile(selectedUserId: string): void {\n  // Konstruera URL:en till användarens profil baserat på userId \n  const userProfileUrl = `./visitprofile.html?userId=` + selectedUserId;\n  // Navigera till den angivna URL:en\n  window.location.href = userProfileUrl;\n}\n// Lägg till händelselyssnare för att navigera till användarens profil vid val i dropdown-listan\nconst userDropdown = document.getElementById(\"userDropdown\");\nif (userDropdown) {\n  userDropdown.addEventListener(\"change\", (event) => {\n    let selectedUserId = (event.target as HTMLSelectElement).value;\n    if (selectedUserId) {\n      navigateToUserProfile(selectedUserId);\n      localStorage.setItem('selectedUserId', selectedUserId)\n    }\n  });\n}\n\nfillUserDropdown();\n\n// Funktion för att skapa inlägg\nasync function createPost(event: Event): Promise<void> {\n  event.preventDefault();\n\n  const postTitle = (document.getElementById(\"postTitle\") as HTMLInputElement)?.value;\n  const postContent = (document.getElementById(\"postContent\") as HTMLTextAreaElement)?.value;\n\n  if (postTitle && postContent) {\n    try {\n      const user = await getYourUser(loggedInUserID);\n      // Ersätt loggedInUsername med användarnamnet för den inloggade användaren\n      const loggedInUsername = user.username;\n      await postForum3({ userID: loggedInUserID, postTitle, postContent, username: loggedInUsername });\n\n      // Återställ formuläret\n      (document.getElementById(\"postTitle\") as HTMLInputElement).value = \"\";\n      (document.getElementById(\"postContent\") as HTMLTextAreaElement).value = \"\";\n\n      updatePostList();\n    } catch (error) {\n      console.error(\"Error creating post:\", error);\n    }\n  }\n}\n\n// Funktion för att skapa en kommentar\nasync function createComment(postId: string, postTitle: string, commentContent: string): Promise<void> {\n  try {\n    const commentList = document.getElementById(`commentList_${postId}`);\n    if (commentList) {\n      const commentElement = document.createElement(\"div\");\n      commentElement.classList.add(\"comment\");\n\n      const user = await getYourUser(loggedInUserID);\n      const username = user.username;\n      commentElement.innerHTML = `\n      <div>\n        <h6>Kommentar av ${username}:</h6>\n        <p>${commentContent}</p>\n        <button class=\"deleteCommentBtn\" data-comment-id=\"${postId}\">Delete</button>\n      </div>`;\n      commentList.appendChild(commentElement);\n    } else {\n      console.error(`Error: Could not find comment list for post ID ${postId}`);\n    }\n  } catch (error) {\n    console.error(\"Error creating comment:\", error);\n  }\n}\n\n// Uppdatera inläggslistan\nasync function updatePostList(): Promise<void> {\n  try {\n    const posts = await getPosts(); // Hämta alla inlägg från Firebase\n    const postsList = document.getElementById(\"postsList\");\n\n    if (postsList) {\n      postsList.innerHTML = \"\"; // Rensa tidigare inlägg\n\n      // Loopa igenom alla inlägg\n      for (const postId in posts.forum3[0].posts) {\n        const post = posts.forum3[0].posts[postId];\n\n        if (post) {\n          const postElement = document.createElement(\"div\");\n          postElement.classList.add(\"post\");\n\n          const postTitle = post.postTitle;\n          const postContent = post.postContent;\n          const userId = post.userID;\n\n          // Hämta användaruppgifter för författaren av inlägget\n          const user = await getYourUser(userId);\n          const username = user ? user.username : \"Unknown User\";\n\n          postElement.innerHTML = `\n            <div class=\"post\">\n              <div>\n                <h4 class=\"username\">Posted by: ${username}</h4>\n              </div>\n              <div>\n                <h5>${postTitle}</h5>\n                <p>${postContent}</p>\n              </div>\n              <form id=\"commentForm_${postId}\">\n                <textarea id=\"commentInput_${postId}\" placeholder=\"Innehåll\"></textarea>\n                <button class=\"commentBtn\" data-post-id=\"${postId}\" data-post-title=\"${postTitle}\">Kommentera</button>\n              </form>\n              <div id=\"commentList_${postId}\"></div>\n            </div>`;\n\n          postsList.prepend(postElement);\n\n          // Ladda och visa kommentarerna för den aktuella posten\n          const comments = await getCommentsForPost(postId);\n          const commentListElement = postElement.querySelector(`#commentList_${postId}`);\n          if (commentListElement && comments) {\n            comments.forEach((comment: any) => {\n              const commentElement = document.createElement(\"div\");\n              commentElement.classList.add(\"comment\");\n              commentElement.innerHTML = `\n                <div>\n                  <h6>Kommentar av ${comment.username}:</h6>\n                  <p>${comment.commentContent}</p>\n                  <button class=\"deleteCommentBtn\" data-comment-id=\"${comment.commentId}\">Delete</button>\n                </div>`;\n              commentListElement.appendChild(commentElement);\n            });\n          }\n\n          // Lägg till händelselyssnare för klickhändelse på kommentarknappen\n          const commentBtn = postElement.querySelector(\".commentBtn\") as HTMLButtonElement;\n          commentBtn.addEventListener(\"click\", (event) => {\n            event.preventDefault(); // Förhindra standardbeteendet för knappen\n            const postId = commentBtn.dataset.postId?.toString(); // Hämta postId från dataset på kommentarknappen\n            const postTitle = commentBtn.dataset.postTitle; // Hämta postTitle från dataset på kommentarknappen\n            if (postId && postTitle) {\n              const commentInput = document.getElementById(`commentInput_${postId}`) as HTMLInputElement;\n              const commentContent = commentInput.value.trim();\n              if (commentContent) {\n                createComment(postId, postTitle, commentContent); // Anropa createComment med postId och postTitle\n                // Återställ kommentarinput\n                commentInput.value = \"\";\n              }\n            } else {\n              console.error(\"Error: Could not extract postId or postTitle from dataset\");\n            }\n          });\n        }\n      }\n    }\n  } catch (error) {\n    console.error(\"Error updating post list:\", error);\n  }\n}\n\n// Funktion för att hämta kommentarer för en specifik post\nasync function getCommentsForPost(postId: string): Promise<any[]> {\n  try {\n    // Hämta kommentarerna för den aktuella posten från databasen\n    const response = await fetch(\n      `https://slutprojekt-js2-socialmedia-default-rtdb.europe-west1.firebasedatabase.app/forum1/0/comments/${postId}.json`\n    );\n    const data = await response.json();\n    if (data) {\n      // Konvertera kommentar-objekten till en array för enklare hantering\n      return Object.keys(data).map((commentId) => ({\n        commentId,\n        ...data[commentId],\n      }));\n    } else {\n      return []; // Returnera en tom array om det inte finns några kommentarer\n    }\n  } catch (error) {\n    console.error(\"Error fetching comments for post:\", error);\n    return []; // Returnera en tom array om det uppstår ett fel\n  }\n}\n\n// Lägg till för formulärets submit-händelse\nconst postForm = document.getElementById(\"postForm\");\nif (postForm) {\n  postForm.addEventListener(\"submit\", createPost);\n}\n\n// Funktion för att hämta inlägg från Firebase\nasync function getPosts(): Promise<any> {\n  const response = await fetch(\n    \"https://slutprojekt-js2-socialmedia-default-rtdb.europe-west1.firebasedatabase.app/.json\"\n  );\n  const data = await response.json();\n  return data;\n}\n\n// Uppdatera inläggslistan vid sidans laddning\nwindow.onload = updatePostList;"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$var$mapping","Map","baseUrl","manifest","i","length","path","$7ce76dd366e58a77$export$757394d2bc56a6a9","$7ce76dd366e58a77$export$2f82891cea95bf3d","$7ce76dd366e58a77$export$26939fe54a60a9f0","$7ce76dd366e58a77$export$6001962e8d53e271","$7ce76dd366e58a77$export$a2e86eb8fefb17fd","$7ce76dd366e58a77$export$b6c7da38e66215af","$7ce76dd366e58a77$export$3e7a6a8197e1d931","$7ce76dd366e58a77$export$a74f6de8490a9db3","$7ce76dd366e58a77$export$b7c2ab1ee09212e3","$7ce76dd366e58a77$export$45abfc3976589d02","$7ce76dd366e58a77$var$baseUrl","$7ce76dd366e58a77$var$header","forum","URL","response","fetch","method","headers","json","data","console","log","userId","newUser","options","body","JSON","stringify","info","error","postData","comment","postId","commentURL","url","toString","parse","$1ahZW","$b05b0ce0579d5b61$var$loggedInUserID","localStorage","getItem","$b05b0ce0579d5b61$var$fillUserDropdown","users","allUsers","userDropdown","document","getElementById","innerHTML","username","option","createElement","value","textContent","appendChild","getYourUser","then","usernameInHeader","querySelector","profileImage","userImage","imageLink","src","$b05b0ce0579d5b61$var$userDropdown","$b05b0ce0579d5b61$var$createPost","event","preventDefault","postTitle","postContent","loggedInUsername","user","postForum3","userID","$b05b0ce0579d5b61$var$updatePostList","$b05b0ce0579d5b61$var$createComment","commentContent","commentList","commentElement","classList","add","posts","$b05b0ce0579d5b61$var$getPosts","postsList","forum3","post","postElement","prepend","comments","$b05b0ce0579d5b61$var$getCommentsForPost","commentListElement","forEach","commentId","commentBtn","addEventListener","dataset","commentInput","trim","keys","map","selectedUserId","target","window","location","href","setItem","$b05b0ce0579d5b61$var$postForm","onload"],"version":3,"file":"challenges.6190b6df.js.map"}